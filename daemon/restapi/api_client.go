// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240325090356-a14414f04fdd DO NOT EDIT.
package restapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHealthz request
	GetHealthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHtmlAlert request
	GetHtmlAlert(ctx context.Context, params *GetHtmlAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHtmlContextMenuContextMenuTypeId request
	GetHtmlContextMenuContextMenuTypeId(ctx context.Context, contextMenuType ContextMenuType, id IdParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHtmlError request
	GetHtmlError(ctx context.Context, params *GetHtmlErrorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHtmlLinkset request
	GetHtmlLinkset(ctx context.Context, params *GetHtmlLinksetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostHtmlLinksetWithBody request with any body
	PostHtmlLinksetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostHtmlLinksetWithFormdataBody(ctx context.Context, body PostHtmlLinksetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHtmlMenu request
	GetHtmlMenu(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHtmlMenuMenuItem request
	GetHtmlMenuMenuItem(ctx context.Context, menuItem MenuItem, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLabelsLabelId request
	PutLabelsLabelId(ctx context.Context, labelId LabelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLinksByUrlLinkUrl request
	PutLinksByUrlLinkUrl(ctx context.Context, linkUrl LinkUrl, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLinksWithGroupsWithBody request with any body
	PostLinksWithGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLinksWithGroups(ctx context.Context, body PostLinksWithGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLinksLinkId request
	GetLinksLinkId(ctx context.Context, linkId LinkId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReadyz request
	GetReadyz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetHealthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthzRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHtmlAlert(ctx context.Context, params *GetHtmlAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHtmlAlertRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHtmlContextMenuContextMenuTypeId(ctx context.Context, contextMenuType ContextMenuType, id IdParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHtmlContextMenuContextMenuTypeIdRequest(c.Server, contextMenuType, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHtmlError(ctx context.Context, params *GetHtmlErrorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHtmlErrorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHtmlLinkset(ctx context.Context, params *GetHtmlLinksetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHtmlLinksetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHtmlLinksetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHtmlLinksetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHtmlLinksetWithFormdataBody(ctx context.Context, body PostHtmlLinksetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHtmlLinksetRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHtmlMenu(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHtmlMenuRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHtmlMenuMenuItem(ctx context.Context, menuItem MenuItem, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHtmlMenuMenuItemRequest(c.Server, menuItem)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLabelsLabelId(ctx context.Context, labelId LabelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLabelsLabelIdRequest(c.Server, labelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLinksByUrlLinkUrl(ctx context.Context, linkUrl LinkUrl, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLinksByUrlLinkUrlRequest(c.Server, linkUrl)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLinksWithGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLinksWithGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLinksWithGroups(ctx context.Context, body PostLinksWithGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLinksWithGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLinksLinkId(ctx context.Context, linkId LinkId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLinksLinkIdRequest(c.Server, linkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReadyz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReadyzRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetHealthzRequest generates requests for GetHealthz
func NewGetHealthzRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/healthz")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHtmlAlertRequest generates requests for GetHtmlAlert
func NewGetHtmlAlertRequest(server string, params *GetHtmlAlertParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/html/alert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Typ != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "typ", runtime.ParamLocationQuery, *params.Typ); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Msg != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "msg", runtime.ParamLocationQuery, *params.Msg); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHtmlContextMenuContextMenuTypeIdRequest generates requests for GetHtmlContextMenuContextMenuTypeId
func NewGetHtmlContextMenuContextMenuTypeIdRequest(server string, contextMenuType ContextMenuType, id IdParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contextMenuType", runtime.ParamLocationPath, contextMenuType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/html/context-menu/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHtmlErrorRequest generates requests for GetHtmlError
func NewGetHtmlErrorRequest(server string, params *GetHtmlErrorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/html/error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Err != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "err", runtime.ParamLocationQuery, *params.Err); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHtmlLinksetRequest generates requests for GetHtmlLinkset
func NewGetHtmlLinksetRequest(server string, params *GetHtmlLinksetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/html/linkset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gt", runtime.ParamLocationQuery, *params.Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Grp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "grp", runtime.ParamLocationQuery, *params.Grp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.M != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "m", runtime.ParamLocationQuery, *params.M); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostHtmlLinksetRequestWithFormdataBody calls the generic PostHtmlLinkset builder with application/x-www-form-urlencoded body
func NewPostHtmlLinksetRequestWithFormdataBody(server string, body PostHtmlLinksetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostHtmlLinksetRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostHtmlLinksetRequestWithBody generates requests for PostHtmlLinkset with any type of body
func NewPostHtmlLinksetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/html/linkset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHtmlMenuRequest generates requests for GetHtmlMenu
func NewGetHtmlMenuRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/html/menu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHtmlMenuMenuItemRequest generates requests for GetHtmlMenuMenuItem
func NewGetHtmlMenuMenuItemRequest(server string, menuItem MenuItem) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "menuItem", runtime.ParamLocationPath, menuItem)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/html/menu/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutLabelsLabelIdRequest generates requests for PutLabelsLabelId
func NewPutLabelsLabelIdRequest(server string, labelId LabelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "labelId", runtime.ParamLocationPath, labelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/labels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutLinksByUrlLinkUrlRequest generates requests for PutLinksByUrlLinkUrl
func NewPutLinksByUrlLinkUrlRequest(server string, linkUrl LinkUrl) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "linkUrl", runtime.ParamLocationPath, linkUrl)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/links/by-url/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLinksWithGroupsRequest calls the generic PostLinksWithGroups builder with application/json body
func NewPostLinksWithGroupsRequest(server string, body PostLinksWithGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLinksWithGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLinksWithGroupsRequestWithBody generates requests for PostLinksWithGroups with any type of body
func NewPostLinksWithGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/links/with-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLinksLinkIdRequest generates requests for GetLinksLinkId
func NewGetLinksLinkIdRequest(server string, linkId LinkId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "linkId", runtime.ParamLocationPath, linkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/links/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReadyzRequest generates requests for GetReadyz
func NewGetReadyzRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/readyz")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetHealthzWithResponse request
	GetHealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthzResponse, error)

	// GetHtmlAlertWithResponse request
	GetHtmlAlertWithResponse(ctx context.Context, params *GetHtmlAlertParams, reqEditors ...RequestEditorFn) (*GetHtmlAlertResponse, error)

	// GetHtmlContextMenuContextMenuTypeIdWithResponse request
	GetHtmlContextMenuContextMenuTypeIdWithResponse(ctx context.Context, contextMenuType ContextMenuType, id IdParameter, reqEditors ...RequestEditorFn) (*GetHtmlContextMenuContextMenuTypeIdResponse, error)

	// GetHtmlErrorWithResponse request
	GetHtmlErrorWithResponse(ctx context.Context, params *GetHtmlErrorParams, reqEditors ...RequestEditorFn) (*GetHtmlErrorResponse, error)

	// GetHtmlLinksetWithResponse request
	GetHtmlLinksetWithResponse(ctx context.Context, params *GetHtmlLinksetParams, reqEditors ...RequestEditorFn) (*GetHtmlLinksetResponse, error)

	// PostHtmlLinksetWithBodyWithResponse request with any body
	PostHtmlLinksetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHtmlLinksetResponse, error)

	PostHtmlLinksetWithFormdataBodyWithResponse(ctx context.Context, body PostHtmlLinksetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostHtmlLinksetResponse, error)

	// GetHtmlMenuWithResponse request
	GetHtmlMenuWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHtmlMenuResponse, error)

	// GetHtmlMenuMenuItemWithResponse request
	GetHtmlMenuMenuItemWithResponse(ctx context.Context, menuItem MenuItem, reqEditors ...RequestEditorFn) (*GetHtmlMenuMenuItemResponse, error)

	// PutLabelsLabelIdWithResponse request
	PutLabelsLabelIdWithResponse(ctx context.Context, labelId LabelId, reqEditors ...RequestEditorFn) (*PutLabelsLabelIdResponse, error)

	// PutLinksByUrlLinkUrlWithResponse request
	PutLinksByUrlLinkUrlWithResponse(ctx context.Context, linkUrl LinkUrl, reqEditors ...RequestEditorFn) (*PutLinksByUrlLinkUrlResponse, error)

	// PostLinksWithGroupsWithBodyWithResponse request with any body
	PostLinksWithGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLinksWithGroupsResponse, error)

	PostLinksWithGroupsWithResponse(ctx context.Context, body PostLinksWithGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLinksWithGroupsResponse, error)

	// GetLinksLinkIdWithResponse request
	GetLinksLinkIdWithResponse(ctx context.Context, linkId LinkId, reqEditors ...RequestEditorFn) (*GetLinksLinkIdResponse, error)

	// GetReadyzWithResponse request
	GetReadyzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReadyzResponse, error)
}

type GetHealthzResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetHealthzResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthzResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHtmlAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetHtmlAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHtmlAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHtmlContextMenuContextMenuTypeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetHtmlContextMenuContextMenuTypeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHtmlContextMenuContextMenuTypeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHtmlErrorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetHtmlErrorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHtmlErrorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHtmlLinksetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetHtmlLinksetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHtmlLinksetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostHtmlLinksetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PostHtmlLinksetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostHtmlLinksetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHtmlMenuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetHtmlMenuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHtmlMenuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHtmlMenuMenuItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetHtmlMenuMenuItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHtmlMenuMenuItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLabelsLabelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *IdObject
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PutLabelsLabelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLabelsLabelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLinksByUrlLinkUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdObject
	JSON201      *IdObject
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PutLinksByUrlLinkUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLinksByUrlLinkUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLinksWithGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]IdObjects
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PostLinksWithGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLinksWithGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLinksLinkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Link
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetLinksLinkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLinksLinkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReadyzResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetReadyzResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReadyzResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetHealthzWithResponse request returning *GetHealthzResponse
func (c *ClientWithResponses) GetHealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthzResponse, error) {
	rsp, err := c.GetHealthz(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthzResponse(rsp)
}

// GetHtmlAlertWithResponse request returning *GetHtmlAlertResponse
func (c *ClientWithResponses) GetHtmlAlertWithResponse(ctx context.Context, params *GetHtmlAlertParams, reqEditors ...RequestEditorFn) (*GetHtmlAlertResponse, error) {
	rsp, err := c.GetHtmlAlert(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHtmlAlertResponse(rsp)
}

// GetHtmlContextMenuContextMenuTypeIdWithResponse request returning *GetHtmlContextMenuContextMenuTypeIdResponse
func (c *ClientWithResponses) GetHtmlContextMenuContextMenuTypeIdWithResponse(ctx context.Context, contextMenuType ContextMenuType, id IdParameter, reqEditors ...RequestEditorFn) (*GetHtmlContextMenuContextMenuTypeIdResponse, error) {
	rsp, err := c.GetHtmlContextMenuContextMenuTypeId(ctx, contextMenuType, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHtmlContextMenuContextMenuTypeIdResponse(rsp)
}

// GetHtmlErrorWithResponse request returning *GetHtmlErrorResponse
func (c *ClientWithResponses) GetHtmlErrorWithResponse(ctx context.Context, params *GetHtmlErrorParams, reqEditors ...RequestEditorFn) (*GetHtmlErrorResponse, error) {
	rsp, err := c.GetHtmlError(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHtmlErrorResponse(rsp)
}

// GetHtmlLinksetWithResponse request returning *GetHtmlLinksetResponse
func (c *ClientWithResponses) GetHtmlLinksetWithResponse(ctx context.Context, params *GetHtmlLinksetParams, reqEditors ...RequestEditorFn) (*GetHtmlLinksetResponse, error) {
	rsp, err := c.GetHtmlLinkset(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHtmlLinksetResponse(rsp)
}

// PostHtmlLinksetWithBodyWithResponse request with arbitrary body returning *PostHtmlLinksetResponse
func (c *ClientWithResponses) PostHtmlLinksetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHtmlLinksetResponse, error) {
	rsp, err := c.PostHtmlLinksetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHtmlLinksetResponse(rsp)
}

func (c *ClientWithResponses) PostHtmlLinksetWithFormdataBodyWithResponse(ctx context.Context, body PostHtmlLinksetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostHtmlLinksetResponse, error) {
	rsp, err := c.PostHtmlLinksetWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHtmlLinksetResponse(rsp)
}

// GetHtmlMenuWithResponse request returning *GetHtmlMenuResponse
func (c *ClientWithResponses) GetHtmlMenuWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHtmlMenuResponse, error) {
	rsp, err := c.GetHtmlMenu(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHtmlMenuResponse(rsp)
}

// GetHtmlMenuMenuItemWithResponse request returning *GetHtmlMenuMenuItemResponse
func (c *ClientWithResponses) GetHtmlMenuMenuItemWithResponse(ctx context.Context, menuItem MenuItem, reqEditors ...RequestEditorFn) (*GetHtmlMenuMenuItemResponse, error) {
	rsp, err := c.GetHtmlMenuMenuItem(ctx, menuItem, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHtmlMenuMenuItemResponse(rsp)
}

// PutLabelsLabelIdWithResponse request returning *PutLabelsLabelIdResponse
func (c *ClientWithResponses) PutLabelsLabelIdWithResponse(ctx context.Context, labelId LabelId, reqEditors ...RequestEditorFn) (*PutLabelsLabelIdResponse, error) {
	rsp, err := c.PutLabelsLabelId(ctx, labelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLabelsLabelIdResponse(rsp)
}

// PutLinksByUrlLinkUrlWithResponse request returning *PutLinksByUrlLinkUrlResponse
func (c *ClientWithResponses) PutLinksByUrlLinkUrlWithResponse(ctx context.Context, linkUrl LinkUrl, reqEditors ...RequestEditorFn) (*PutLinksByUrlLinkUrlResponse, error) {
	rsp, err := c.PutLinksByUrlLinkUrl(ctx, linkUrl, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLinksByUrlLinkUrlResponse(rsp)
}

// PostLinksWithGroupsWithBodyWithResponse request with arbitrary body returning *PostLinksWithGroupsResponse
func (c *ClientWithResponses) PostLinksWithGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLinksWithGroupsResponse, error) {
	rsp, err := c.PostLinksWithGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLinksWithGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostLinksWithGroupsWithResponse(ctx context.Context, body PostLinksWithGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLinksWithGroupsResponse, error) {
	rsp, err := c.PostLinksWithGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLinksWithGroupsResponse(rsp)
}

// GetLinksLinkIdWithResponse request returning *GetLinksLinkIdResponse
func (c *ClientWithResponses) GetLinksLinkIdWithResponse(ctx context.Context, linkId LinkId, reqEditors ...RequestEditorFn) (*GetLinksLinkIdResponse, error) {
	rsp, err := c.GetLinksLinkId(ctx, linkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLinksLinkIdResponse(rsp)
}

// GetReadyzWithResponse request returning *GetReadyzResponse
func (c *ClientWithResponses) GetReadyzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReadyzResponse, error) {
	rsp, err := c.GetReadyz(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReadyzResponse(rsp)
}

// ParseGetHealthzResponse parses an HTTP response from a GetHealthzWithResponse call
func ParseGetHealthzResponse(rsp *http.Response) (*GetHealthzResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthzResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHtmlAlertResponse parses an HTTP response from a GetHtmlAlertWithResponse call
func ParseGetHtmlAlertResponse(rsp *http.Response) (*GetHtmlAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHtmlAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHtmlContextMenuContextMenuTypeIdResponse parses an HTTP response from a GetHtmlContextMenuContextMenuTypeIdWithResponse call
func ParseGetHtmlContextMenuContextMenuTypeIdResponse(rsp *http.Response) (*GetHtmlContextMenuContextMenuTypeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHtmlContextMenuContextMenuTypeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHtmlErrorResponse parses an HTTP response from a GetHtmlErrorWithResponse call
func ParseGetHtmlErrorResponse(rsp *http.Response) (*GetHtmlErrorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHtmlErrorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHtmlLinksetResponse parses an HTTP response from a GetHtmlLinksetWithResponse call
func ParseGetHtmlLinksetResponse(rsp *http.Response) (*GetHtmlLinksetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHtmlLinksetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostHtmlLinksetResponse parses an HTTP response from a PostHtmlLinksetWithResponse call
func ParsePostHtmlLinksetResponse(rsp *http.Response) (*PostHtmlLinksetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostHtmlLinksetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHtmlMenuResponse parses an HTTP response from a GetHtmlMenuWithResponse call
func ParseGetHtmlMenuResponse(rsp *http.Response) (*GetHtmlMenuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHtmlMenuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHtmlMenuMenuItemResponse parses an HTTP response from a GetHtmlMenuMenuItemWithResponse call
func ParseGetHtmlMenuMenuItemResponse(rsp *http.Response) (*GetHtmlMenuMenuItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHtmlMenuMenuItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutLabelsLabelIdResponse parses an HTTP response from a PutLabelsLabelIdWithResponse call
func ParsePutLabelsLabelIdResponse(rsp *http.Response) (*PutLabelsLabelIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLabelsLabelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest IdObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutLinksByUrlLinkUrlResponse parses an HTTP response from a PutLinksByUrlLinkUrlWithResponse call
func ParsePutLinksByUrlLinkUrlResponse(rsp *http.Response) (*PutLinksByUrlLinkUrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLinksByUrlLinkUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IdObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostLinksWithGroupsResponse parses an HTTP response from a PostLinksWithGroupsWithResponse call
func ParsePostLinksWithGroupsResponse(rsp *http.Response) (*PostLinksWithGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLinksWithGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []IdObjects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLinksLinkIdResponse parses an HTTP response from a GetLinksLinkIdWithResponse call
func ParseGetLinksLinkIdResponse(rsp *http.Response) (*GetLinksLinkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLinksLinkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Link
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetReadyzResponse parses an HTTP response from a GetReadyzWithResponse call
func ParseGetReadyzResponse(rsp *http.Response) (*GetReadyzResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReadyzResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
