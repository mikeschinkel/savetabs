// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240325090356-a14414f04fdd DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xYQXPbNhP9K/vh64wvjKjEbQ+6JWlre5zUnsRpD2kOELmiEIMAA4C2WQ//e2eXoihS",
	"lCV7nFw8IrDcffsWWL71vUhsXliDJngxuxeFdDLHgI6f3lh7nUt3/YfSAR2tpOgTp4qgrBGz9T4s2AAW",
	"1sE7Za69iATeFdqmKGbBlRgJRfbfSnSViISROYqZmItI+GSJuSTXKmDOUUNV0K4PTplM1FG7IJ2TFT37",
	"UGlaWFiX0/NbGTCzrtoFs90HTdhgXkHSrCg8EGnyTEhPnC2Lj7rMtkHSKhMYlggZ2UWgJjgBbW/RJdJj",
	"CoQGblVYgjW6AqmLpTRlDtKkkEq/5HQYfyHDsoOfrcNGwuG3UjlM23S7tAbZtHCveHkI98IgJEvpZEKF",
	"5wBADiLASTaBo5OjCI7e0p9z+nN1FAGGZPIAPo7zRHx/sp8hRloFu9hAtyc8u3kchHOs/pK6xF1n7xyr",
	"mA0gxyBTGeQTL0veO4IyTRVFkPrS2QJdoKP8wIm086+YhLEjeY7VrXXpA/hp+4mgr5/p3rxHU54FzLfx",
	"0SpoOUfN2HI0Jdhmc7TWeevpcWW+knM+bLtoave7FhNkdiBJ2TORdCWz3fCypyALz4KsJqp9YY1vzuhp",
	"yPWH1QI9J9YENIE9412IlyHX9NBFxjuZF+zxn3I6PU5SdcM/8BS1thGcXr1/979mK17viWirjnU04IVe",
	"BOvYAXijigIDOAylM5iCL5MEvV+UWnNanwzeFZgETH93zroBdlkUWiWSPMdfPbnfTOEnhwsxE/+Pu+9t",
	"3Oz6uPE2Aq9cBwRc2bQFYSbXMIpeE0i4rMMzwMbAexFXRgYxE8qE41cdVcoEzNBRtjl6L7OdjtrtaOS2",
	"dDfrs1gFbM2/1JE4S7edXjqVS1fBNVagUjRBLRS6AdJffx5FepZeNO1tiwmV7uP+LGXEW22y9el7J/9h",
	"Txfrt4cXglrmLnQHJBhU0Dh680qnez5Kp0YrspUfIfpbhSV3LT6+Wl8sxOzzw0lyInU0zCRrvWwB5J2z",
	"QxPNNgXH3iy+rPLw60QOr1Y//62SUTRlFpZxNOyLj/IGr+Tcw28Sc2vg9eWZiMQNOt8c4ZeT6WRKrmyB",
	"RhZKzMQxL0X8DWJI8RKlDst/mTQMI1p1ick1a8DGEnyQofQkY9bxU45PWopqwB2HGBYnGE5X7gct99V0",
	"OiLhzgnsL9PjETGK7kYlCJ+MvJFKy7nGpveUOd1S6pwNOobLW9y247mzt01XX2W3jTDk+k1jNQ5yrGpr",
	"u7j38ehD+sB9m7njft6K6SYazG1ardQprWrlQ18cepAepGlepu2NvNjqBVvF9z29WDd7fl/Oa63qe6p1",
	"dWyj3uS14xJ2JnFf+dZfvh+VPZ48kyo3SCPOiLAhV5s01avfNIHUB/HUcXSyMbo8kSLuV4cYc5gfwWUj",
	"xTap3GaRbR4iq5Xhj2NlIGQPoGYwXR/wRidEDzDuzx8HvDD4p8RhITZntO9Z4XXjkVDITBlJ2i1Q/+zq",
	"3gzwRTO+rQYrZTJInKJfEpQBFuKwUdruYNAEs+8S0bz0o9orx+rDi+/bMas+BOn7biZ73GFev/hDStpP",
	"lmsZUy1fdB+AwvqRVC+tD0Od0ohk9OGNTatnmySGUeq+GqdJr95i6uWjwj9KC/txZTUYTrkz8s1Ah5A4",
	"pFsj2G4hSx32V3I4mfWL+TpNPeSlDqrQq1ARoEyWzVVsOjCrPa6sQ5lW+xSa2tJjoDzwqxAseHQ3OKrQ",
	"PjTev7tAozjKoPdrjVbX/wUAAP//g5Oqlu4VAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
