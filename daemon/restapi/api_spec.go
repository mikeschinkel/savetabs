// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240325090356-a14414f04fdd DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVT2/bOgz/KgLfO/rFafO2g2/dOnTBDin6BzsUPSgWE6u1JU2k02WFv/sg2fGSOF1T",
	"YDslEqnfH5GinyG3lbMGDRNkz+CRnDWEcXFr8LvDnFF98t76sJVbw2g4/JXOlTqXrK1JH8iasEd5gZUM",
	"//71uIAM/kl/4adtlNIWrWmaBBRS7rULIJBB3RMK7HKSDjMK6mU4bx161q3O3CoMv7tgMVnEWAIL6yvJ",
	"kIE2PDmFBHjtsF3iEj00CVRIJJcvAm3C/VFir80ySvT4rdYeFWR30BFu0u+bBKZqCHrpdSX9WjziWmiF",
	"hvVCo99T+v7/g0qnajZ/wJyHN6HVa3c/VVFxB2pbnC3MFoaxoteRZv3pDk56L9dhfYVka5/jSwqPMFn7",
	"MmQOL3sgfUP2VXNx4W3tYneW5WwB2d3vPfQ6m2Rf6HKDtKcgaSPTY33E7Ju4fYSb+y0/1Bs6vijDuxhU",
	"J7Bqs7BRj+YyhK7lCm/knMS5xMoacXY5hQRW6Knt1pPReDQOUOGhX0eucy3L2INQMDvK0pQc5iPr0Ein",
	"aWT9MrWS0snoJFVtbjqXFN5GlwMZTCJuAk5yEb2lBcqSix+xAsjDd/OxwPxRcIGizRTEkmsSdiF6Eyqa",
	"GLVMPk6oUC64QP7cwSe7k+50PB5Szb4Ex+/Gk2HoGv1K5yhujVxJXcp5ie2sqqvwqiGDlkhEuTGUepRq",
	"/ZoxPbAhNIl4VLAVhH6FB41dteh/3Vfg0QaJdq11HZs+aS7+W/Y96yxFq7tyLy3xoSZvBykSf7Bq/ce+",
	"NoeYmt2pzb7GZnB1J2+S8KaZSYef5W4xbgoU/c2KJ/Qoco+SUUHMXci65JcYey/p/ld8t55nSpGo6pK1",
	"K7foEoEyL0Qop4jlFHFkRJWxCT1BdmfqsrxPgOVya/WE88LaR4IsbDQ/AwAA//85WYacYggAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
