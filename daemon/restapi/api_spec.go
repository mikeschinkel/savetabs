// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240325090356-a14414f04fdd DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXwXLbNhD9lS3aGV8QUYnbHnRL0o6tSVNnHGd6SHOAiJWIBARYYClb9fDfOwAkihTp",
	"SM7UuWhEYPH27cNyd3nPcltW1qAhz2b3rBJOlEjo4tOFs3X1Xter8CDR505VpKxhMxZWYWkdUIGwCnYc",
	"1AQnoO0tulx4lGBEiXCrqABr9AaErgph6hKEkSCFL9AzzlRAqwQVjLNwgM3YqnXLmcN/auVQshm5Gjnz",
	"eYGlCHxoUwVjT06ZFWsanujexOVDulcGIS+EEzmhS3whAHDAyWoCZxdnHM5eh5834efmjANSPvkKv+jn",
	"G/n9GXEOOYZVsMsOuyPuI8zjKLxFU88Jy6H3sApaLFDHay3R1GDT5iiLcof0GAJNMPaVNR5jgl1Sqa+3",
	"C+E5t4bQUDyKd5QVVOrwsEfEO1FWOoD+XU+n57lU6/gHL1Fry+Hy5u0fP6StrN1jfIxJP/5wEKyLAOCN",
	"qiokcEi1MyjB13mO3i9rrTes4eyDwbsKc0L5u3PWHXAXVaVVLgJy9tkH+G4IPzlcshn7Mdu/elna9VlC",
	"G6FXtw4BtzY7oaOSLY3K2QodqSRwbuVIpkVjiHucLa0rBbEZU4bOX+ylUoZwhS5EW6L3YvUg0G6bjyTc",
	"Pjc+sq3DnfmnhrO5HIK+c6oUbgNfcANKoiG1VOgOmP768yjTubxafMachkooeUz7uYyMt6A24XQwEwxh",
	"6Y8jXbWnt3DCOREz5xq9rV2ODzE8Icja6fG3e0B95+wvRUWsPjE7tb5astnHr8fQ8mz4IdHVDumAAU87",
	"81PjWHXr9dFoPnXi8W1Ap1/KUIvB7QSvyixt5KMolpn3Yo03YuHhN4GlNfDy3ZxxtkbnU7Y+n0wn0wBl",
	"KzSiUmzGzuMSjwUz0soKFJqKf6N4SMOUf11g/iW20mQJngTVPnSD1r+M/kNLCncRi0tQml0gXW7hD6rr",
	"i+l0pBO+CWR/mZ6P9HR0a5UjfDBiLZQWC42pzNRleCFDkUzsIt24FSt0tnD2NhXwbXRDhlTqV8lqnOTY",
	"zbV2Wa9P9CldxxIdtYulezeTJG+wsHKzbfJhVStP/R7rQXgQJh0O2524otWzaJXd99puk/b8sZjblu97",
	"zX+burw3bz3wQu5Nsv4A0Xx6Oil7OvkoquiIFjQLgh1q1ZWp2f4Pg1xzkk57jS46E+A3ShTr1inG0c33",
	"0NLtildPzqGSYbI6pleY477XmxR99ell97vxrzmF6dv9rPi422wPPuX9PBCsQyE3x0q2GhRoUB7iUSAL",
	"Ht0aR0v2dUJ/8ood/CiD3neLdpuJWfg6e7YvZZX1Izf5znoa67xpukNPr6zc/G8j8Jinpj9Khs+MZiDd",
	"80dReNQg58dnhf5l3BTYecdv0SHkDgWhZNF2KWpNx5P28NOif58vpfRQ1ppUpTvuOKDIi/SxnepKnGOa",
	"pmn+CwAA//+GO4V+4w8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
