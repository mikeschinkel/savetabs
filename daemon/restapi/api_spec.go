// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240325090356-a14414f04fdd DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xYS3PbNhD+KyjaIx0qcduDbk4fsRu79iR2e0g9HYhcUYhBgAFA26xH/72zC1ISH7Ip",
	"jZKbiMfi28WH3W/1xBOTF0aD9o5Pn3ghrMjBg6WvEwXWX7gMf6fgEisLL43m0zDDcnBOZMC8Yal0hRIV",
	"E46dXl+c84hLXPelBFvxiGuRA5/y3GU84i5ZQC7QqK8KHHbeSp3xZcSdrxSOzI3N8ZvOuaZVXQg4ysyc",
	"if2g+KpoQQFd5nz6iZM52jM3uKBMEnCOR/xBWI0oIw7WGstvo5fhvzXmLhf27nepPNi+D808m9MCNjeW",
	"nUt9h+fBY6FMCnzqbQnDPsxaHkgPuRuMaj0grBXVEMxfhIfM2GobzGaeKcTGZhVLwoiEkUiTAyH9DUM/",
	"yEia2Z0GYO1ujHxnTVkg97YFi+6PblIwWsyIv6PClPkDxek9VA/Gptsw1tN70u7uQCAvQJdnHvI+Phxl",
	"SsxAEbYcdMlMmKwhFcIvNvJKYyniFr6U0kLaOLD1agmAF6nw4pkwxX8JVQLL65V7RixvRUykqcQThLqy",
	"pgDr8Rk9E0Az+wyJH4rgtZgRxbY50MyvH64X2UjM2YFu+Vpk2+Fl+yA7zCNZIldcYbQL0T/1ufpQD+B3",
	"YrQH7ckyPPp44XOFHxsl41HkBVn8p5xMjpNU3tMPOAWlTERp57swFa/meK9sIJJ2XHAjM5YMMKdlUYBn",
	"FnxpNaSsLknzUily60bDYwGJh5RyYAe7KAolE4GW488OzW+68IOFOZ/y7+O1DIjDrIv/+Hj5Z7A4ALFc",
	"HcqgXtNcCkXzLO1f95WVubAVu4OKyRS0l3MJmH7xQoTnUy61//nHdYSk9pCBRSfP0svwClCktF6NTF9y",
	"5CwldL3X1Nh0LRo9b+lytbvLrnW4ehATIvRwxaK5dgiO3wyGoK5tL5S+AX5tJsVPvD6wWX67jKhk7RvY",
	"iBsrM6mFurH0PlaelFbyAY3kpVcw+F7LMQaGLhLx/y39gnIdkV6pyzmffnoePrm9jLp+Z42VHkCaCcwe",
	"QdmsUQrDxafjRXMPbuXIeFq2/e9xE08jOYs4QvT5R3EP12Lm2K8CcqPZydUZj/g9WBc49frV5NWEbrcA",
	"LQrJp/yYhiIqvQQpXoBQfvEfBQ38gG5cQHLH/AJYWMmcF750qNpX56d0/itOJ1nKUxhh/g78aW2+k6jf",
	"TCb9oy7fI9ifJsf9qY9g72UC7EaLeyGVmCkI2arMMR1hvg3oCC5NUbKPQyuwzbnQAgUeYBoUGEvpKnZz",
	"Vvcktezs++VzdVK3GZsN1xa6rpfE63YIaTtmMWrl5e1wBIf2r9bFrXrYidf1xfnRhufkyzpu0GTBwbiF",
	"bLVv3EKG3TVuq7bha4diXQtDKEjdwCaJBr06r5ft6le3GRnBio5kHLGj0x2OOiMbv7jdqozY0GmqR+zo",
	"6PyDk+ADSTNKdCTZQvNXCCyLyAqPOQezXhC7D9Iv6nZGqLqjkDpjiZX4SzCpGUletsGGZcQL4wYodGVc",
	"h0NY7cH5tyatnhGDj0cPDw9E3aPSKtCoC9LwT0hiUqxSuCEJr/apJ+vRlX+DROhI9p7MXsvNdqFdG+9V",
	"2g3rI4XZQNnr1di2FEK0ywMz4aZIhQcmmAOPFx56xHU+wEb1pWSAbTH/BgzFDzqrDS9+arrp5RikF+vW",
	"e7fctdr4TZ5j21l6hzG+w6NsJbW2P6+uLhv7xHbrt7qnjKLr652O36nJccNKstPCL6DJamCBJRYw43Fa",
	"Nxel8i/fZLd/bV/mSZo6lpfKy0LVR0UMRLIIaZSuj5G6pZu1INLqJUUqe/qTScdoK/OGObD3MKhIPwTr",
	"X12Q4jlSg3MrTbpc/h8AAP//7ENi1qsXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
