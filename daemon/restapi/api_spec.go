// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240325090356-a14414f04fdd DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXyXLcNhN+Ffz4c6TMsZXkMDc7i6VYilSWlBwcVwpD9nBggQANNCUxqnn3FBpcxGUk",
	"SjXxjcTS/fX+4Z4nJi+MBo2OL+95IazIAcHS3ztjrnNhr3+VCsH6lRRcYmWB0mi+bPfZmg6wtbHsROpr",
	"xyMOd4UyKfAl2hIiLv35ryXYikdcixz4kq94xF2ygVx40RIhJ61YFX7XoZU649uoWRDWisr/O6yUX1gb",
	"m/v/nwRCZmy1C2azz5THxlYVS8KKhJlIkz0h/cVaY09dNsZIOywH50QGDA1LpSuUqJhw7Ojy9IRPAwNr",
	"e9BGiIYI3ltTFpdVAbucRfGjSApGh5k/Pc9NGe7JTx+gujU23YWx3n5h2l3vCeQp6PIYIR/j86tMiRUo",
	"wpaDLpkJmzWkQuCmQ5Q3kiJu4WspLaSNATtDSwBQpALFI26K/xCqBJbXJ1/osbznMZGm0msQ6tyaAiz6",
	"MnrEgWb1BRKc8uClWFGK7TKg2e8KF0U2E3O2pyhfimw3vOwlyPZTJFufK64w2gXvH2GuPtYL/j8xGkEj",
	"SYY7jDeYK//TaYY7kRck8a9ysThMUnlDH3AESpmI2s7/wlbc7vFolIjbaOAXf5EZSwKY07IoAJkFLK2G",
	"lLkyScC5dakUmXWl4a6ABCGlHjjALopCyUR4yfEX58U/NOE7C2u+5P+PuykWh10X/3Zx9nuQOAGxbJUy",
	"qM80QSFvHqfjcJ9bmQtbsWuomExBo1xL8O3XB0QgX3Kp8cfvOw9JjZCB9UYep2ehCvyM7VWNTJ8y5Dgl",
	"dKNqamS6Xho9LumsvT3Mrs5dI4gJJfT0xKK9vgsO30y6oJ5tT4y+ifx62BQ/8Vphc/zzNqKR9VLHRtxY",
	"mUkt1JWl+mgtKa0cg4k4SlQwWa/lHAFTgfT4/5S4oV5HSa/U2ZovPz0On8zeRkO7s0bKCCDthMyekbJZ",
	"wxSmh8/AiiYOrjVkflr27R/lptcm9doQjuB9fiFu4FKsHPtZQG40e3t+zCN+A9aFnHr9avFqQdEtQItC",
	"8iU/pKWIRi9BijcgFG7+IacBTvDGDSTXDDfAwknmUGDpmFmzVn9K+l9x0mSpT3kP8/eAR7X4QaN+s1iM",
	"VZ198GB/WByOty7A3sgE2JUWN0IqsVIQulWZ+3bk+21AR3Bpi5p9DE01TxoXqi7kgW+DwvtSuopdHTOh",
	"wGJDO8d2Ya5Cp4h674Ud6dodiVv6u/081yl9Qy9PTw46yF3nDgbTLA621iZPYj+pjz0X/ZA6+9J74sqA",
	"4My4MXjLzNKRzT/cJ9YzLgyegDNuDFjprlBPSWnPxT0200+Cj0QkqCyJYISnSiF8E/dZgb5CfI0GanYr",
	"cVOTb6Fq/it1xhIr/ZdgUjMiaOxBNmwjXhg3kULnxg1yyM8mcPjOpNUj1OXu4Pb2llL3oLQKtJ9i1Ijp",
	"0/dUfyEJiX8/IqHelL/DQBsQzBEp7MhRfyx0wkdz4YH0mTRiokmPJkJ/cHu02z1nwlWRCgQmmAP0AQ8v",
	"mq4f+GfVU83AP+L4N8hQ/0O6+vDi++btt52D9LR7KD6vd7UXv0k59o2lOox9HR5kLTHYXV5DFjG3xJ73",
	"OhhqmZWur5+l/lmU3E3znsGDcwNNVwMLLLHgOx6nc2tRKnw6ksPXVj+Yb9PUsbxUKAtVq4oYiGQT2iiF",
	"jxEXo8haEGn1FH+SI7bEpGN0laFhDuwNTPKnj0H6f06fvB6pwbmWQW23/wYAAP//hMTkGhgVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
