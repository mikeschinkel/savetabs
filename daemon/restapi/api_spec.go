// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240325090356-a14414f04fdd DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXS3PbthP/Kvjj3yMdKnHbg25JH7EnydiT2O0hzXQgckUhAgEEWMpmPfruHSxf5kM2",
	"7VFzI7GL3d++F3c8Mbk1GjR6vrzjVjiRA4KjvzfGbHPhtr9LheDCSQo+cdKiNJovWzpbEwNbG8feS731",
	"POJwa5VJgS/RFRBxGfi/FeBKHnEtcuBLvuIR98kGchFES4SctGJpA9Wjkzrj+6g5EM6JMvx7LFU4WBuX",
	"h/9fBEJmXHkIZkNnKmBjq5Il1YmEmUiTIyF960xhr0oLh6CS98iPghEzC9zzQGZ4JJTvoLwxLj2EsSY/",
	"M+jbI4H8ALo4R8jH+MIpU2IFirDloAtmKmINyQrcdIjyRlLEHXwrpIO0MaADOsBHAFCkAsUDbor/EKoA",
	"ltecz/RY3vOYSFMZNAh16YwFhyGJH3CgWX2FBKc8eCVWlGKHDGjoXdmgyGZizo4U5SuRHYaXPQfZcYpk",
	"H3LFW6N95f0zzNXH+iD8J0YjaCTJcIvxBnMVfjrNcCtySxL/KhaL0ySVO/qAM1DKROzs6sP7/1WkuKXx",
	"aJSI+2jgl3CRGUcCmNfSWkDmAAunIWW+SBLwfl0oRWZda7i1kCCkvzln3AC7sFbJRATJ8VcfxN834QcH",
	"a77k/4+7GRJXVB9X0ibgFa1CBjVPExDyZAvD9tI7obAOc4CYGdEiioxAvuRS4+mrzlVSI2TggrU5eC+y",
	"g4IacjRR7l1r+MxrhQ37l33Ez9Ox0Esnc+FKtoWSyRQ0yrUEN0D684+TSM/Ti6pwR56Q6WO+P08J8agB",
	"NDJ9L/MflnTR3h4WROhgz0UXceNkJrVQ147qovVI4eTY/RFHiQom67SYI2DKGwH/nxI31OMo2ZW6WPPl",
	"54fhk9n7aGh31kgZASRKlR4z4p41G8L00BlY8aW2w7eGzI9t3/5RgIM2qdeGcFTe55/EDq7EyrNfBeRG",
	"s9eX5zziO3C+SviXLxYvFhRdC1pYyZf8lI4iGrkEKd6AULj5h5wGOLGtbSDZMtwAqziZR4GFZ2bNWv0p",
	"6X/BSZOj/hQ8zN8CntXiBw361WIxVnXxLoD9aXE6Jn0Ct5MJsGstdkIqsVJQdaoiDzUd+myFjuASiZp8",
	"TCOpsqs2bwwRc/W+Zot6K/eB3OtY4uEGGTLxkSuDOT/jxmChnqUjm8/c3y9nXBi8Q2bcGCxn+y/T6TAl",
	"peWLe0O9H/yPNE8pS2nOVhu7FaGnhdGGIWFCylYbyo3ETb2DClWvgVJnLHEyfAkmNaM9hd3Lhn3ErfET",
	"KXRp/CCHwnACj29MWj4wwW9Pbm5uTkITOimcAh3GGPUl+gwtJlxIqgq4G+1iwZS/q/4+2LNGu1G3I/S7",
	"ZCd81CbvSZ85miZ61qhB9id3QLs/ciZc21QgMME8YAh4tdh3/SC8Lh5rBuEtw79DhoYf0tWHF981T6D9",
	"HKQfuvfS03pXe/G7lGPfWKrDONThSdbOycPlNRyqc0vsaUvyUMusdH35JPVPWvP89BoweHdtoOlq4IAl",
	"DkLH48S3FoXCxyM5fHT0g/k6TT3LC4XSqlpVxEAkm6qNUvgYrSYUWQciLR9bJ+RoeWDSM7rK0DAPbgeT",
	"68THSvp/vk0EPVKD9+1Csd//GwAA//+F2GPunRMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
