// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240325090356-a14414f04fdd DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xYzXLcOA5+FSx3q3xRWp14dw99SzIztsvJ2OU4M4dMDmwJLTGmSIWkbGtcevcpQi21",
	"/totu5xcXC0SBD58AEHADyzSWa4VKmfZ6oHl3PAMHRr6eqf1TcbNzW9COjR+JUYbGZE7oRVbtfuwIQHY",
	"aAMfhLqxLGB4n0sdI1s5U2DAhJf/XqApWcAUz5Ct2JoFzEYpZtyrFg4zsurK3O9aZ4RKWBU0C9wYXvpv",
	"60rpFzbaZP77PXeYaFPug9nsg/TYYF1CVK8InIk0eiGkJ0YX+SdZJGOQfpUIdClC4uUCEAtcgNR3aCJu",
	"MQaPBu6ES0ErWQKXecpVkQFXMcTcpuQO4c+5S3fwk9ZswAx+L4TBuHF359bAmwbuNS0P4V4ohCjlhkc+",
	"8GQAvIIAcJEs4OjkKICj9/7Puf9zfRQAumjxCD6y80x8v5OeIUa/CnrTQXfAPKl5GoRzLP/gssB9uXeO",
	"ZUgCkKHjMXf8mZcl66Ugj2PhLXB5aXSOxvlUfiQj9fobRm4qJc+xvNMmfgS/334m6JsXujcfURVnDrMx",
	"Pr8Kkq9RErYMVQG63pyMddZoelqYr/makm0fTc3+rsQ4nswkKXkhkq55sh9e8hxk7kWQVZ5qm2tl6xw9",
	"dZm82i7470grh8qRZrx3Yeoy6T92lvGeZzlp/KtYLo+jWNzSDzxFKXUAp9cfP/yr3grbPRaM4lgFA178",
	"QdCGFIBVIs/RgUFXGIUx2CKK0NpNISW59VnhfY6Rw/hXY7QZYOd5LkXEvebwm/Xquy78x+CGrdi/w917",
	"G9a7Nqy1TcArWoOAW5kmIMRkCyPvFYGIwjrMARIG2gsoMtyxFRPKHb/ZUSWUwwSN9zZDa3myV1GzHUzc",
	"lt3N+sK2Bhvxr1XAzuKx0ksjMm5KuMESRIzKiY1AM0D6//9OIj2LL+ryNmJCxIe4P4sJ8ahMNjptL/Mf",
	"13TRnh5eiCu0ujAR7kM4w8nCyOnSNILeGPtTuJSKEmWnlBcbtvryuA8tzioYAk0aTaPbTztnc/1Iuj3F",
	"QW++dvyxrUPzgzLmYhQdb1WojSY8wlGZ+cRv8ZqvLfzCMdMK3l6esYDdorF1tr5eLBdLr0rnqHgu2Iod",
	"01JAzw3BClPk0qV/E3noJtrSFKMbavdqSbCOu8L6jqW1H5N93zb5WFBx8UyzE3SnW/WD6vpmuZzo1s49",
	"2P8tjyf6TjS3IkL4rPgtF5KvJdZlpsj8hfRFskZHcGmLKnS4NvquLuBb78YIXSbf1VLTIKci18qFvXei",
	"D+mKSjRxR6W76Ztra7DWcbltRP2qFNb1+0AL3AJX9WG/3fGLpF6RVPjQaw2res8e8rltS22vQd2mbtAb",
	"svZcyJ1I2G9yq68/jsoeT5ZI5R3SPGeesCFXXZqq7W8/bFSzeNpxdNKZUp5JEdWtOcJk5mdwaZri1aNz",
	"zCR1Z48R1nTdT2Nm0LfOoGcwTM84ses7Zwj3x40ZBwb/g5hnojuS/cgot8WHQ84Tobhv1ZyvoT72dcdd",
	"z+t5Pa1t5yihEoiM8L84CAXUd0MntLvE8APLoYvkx6OfVWLJVh9e+NBMVdUcpB93I9jTkrk9+FNC2nfW",
	"II/LQ2+5GL3cICzQUXAaLJpbnHzLr2rtP/wp93aEQmu7r3lbokKfqq92b1yu7UQkL7V1Uy1Z3fajde90",
	"XL7YbDRlqerPGH5+rUbUvX4ShCd1+Ha6iRyM3Cl2iv8dGoTIoC8QjGQ3vJDucNIOZ85+PN/GsYWskE7k",
	"smMuAORRWlee+sGhBreqquqfAAAA//+orUwl8RUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
