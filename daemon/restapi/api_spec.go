// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240325090356-a14414f04fdd DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xYTXPbNhP+K/vi7YwvjKjEbQ+6JWlrexLXnsRpD2kOELmiEIMAA4C2WQ//ewfLL/FD",
	"Fu1xctGIwHL32WeB1bO6Z5FOM61QOctW9yzjhqfo0NDTG62vU26u/xDSofErMdrIiMwJrdiq3YcNGcBG",
	"G3gv1LVlAcO7TOoY2cqZHAMmvP23HE3BAqZ4imzF1ixgNtpiyr1r4TClqK7I/K51RqiElUGzwI3hhX+2",
	"rpB+YaNN6p/fcoeJNsU+mM0+SI8N1gVE1YrAmUijZ0J6YnSefZR5MgbpV4lAt0VIvF0AYoELkPoWTcQt",
	"xuDRwK1wW9BKFsBltuUqT4GrGGJut5QO4c+423bwkzZswAx+y4XBuEm3S2uQTQP3ipaHcC8UQrTlhke+",
	"8BQAvIMAcJEs4OjkKICjt/7jnf+4OgoAXbR4AB/FeSK+fZWnw0isciBjqKPMqHninrPoPu6f5HiI0a+C",
	"3uxweIAkcvM4ot5hcatNvI+mevuJ1/j6mXg6R5WfOUzH+PwqSL5GSdhSVDnoanOSqrTx9DiWztHxmDv+",
	"AE3hX1zmCGlt+UTG0h5jPI6Fj8DlpdEZGufb0gME6vVXjNwUg1d8TYdtXwLNftcIHU9mYk6eqcpXPNkP",
	"L3kKsue5p6U/KzbTylbsn7pUfqgX/HOklUPlyDPeuXDrUukfush4x9OMPP6TL5fHUSxu6AueopQ6gNOr",
	"8/f/q7bCdo8Fo4NYBgNe/IugDTkAq0SWoQODLjcKY7B5FKG1m1xKSuuTwrsMI4fx78ZoM8DOs0yKiHvP",
	"4Vfr3e+m8JPBDVux/4edKgirXRtW3ibg5W1AwNqmKQgx2cLIesc7orIOzwAZA+0FVBnu2IoJ5Y5fdVQJ",
	"5TBB47NN0Vqe7HXUbAcT171rDZ9ZHbAx/1IG7CweO700IuWmgGssQMSonNgINAOkv/48ifQsvqgu7ogJ",
	"ER/i/iwmxKMG0Pi0vZP/sKeL9u3hhfAdbB+6GQk64SRO3rzcyJ6P3IjJiozy84j+Fm5LXYuOr5QXG7b6",
	"/HCSlEgZDDNJGi8jgLRzNjfRZFcWHcziS52HbROZX61+/qOS+WhCbTThqNhnH/kNXvG1hd84plrB68sz",
	"FrAbNLY6wi8Xy8XSu9IZKp4JtmLHtBTQjyhBCrfIpdv+S6Shm1DUW4yuSalWlmAdd7n1MqaNH1N8r/h8",
	"DajjeIbZCbrT2v2g5b5aLieE5jsP9pfl8YRkRnMjIoRPit9wIflaYtV78tTfUt85K3QEl7aobYdro2+r",
	"rl5nN0boUvmmspoGOVW11i7s/Xj0IX2gvk3cUT9vJH8VDdY6LmoN7VelsK4vDi1wC1xVL/vtnbzI6gVZ",
	"hfc9vVhWe/ZQzq1WtT3VWh/boDcf7rmEnUnYV77ll+9HZY+nRvF3pHnOPGFDrnZpKuvvfk4qZ/HUcXSy",
	"M2A9kSLqV3OMKcyP4FLuDE8VlWMWyeYhshpV/ERWaqk4g5uB9p3xxuBvg1kxkvnG/ZlrxguDf1tmvDEY",
	"WL7noWh7FYeMJ0JxL/ecb7ndUan+mciqWaYejYRKIDLCf+MgFJB2h53T0J0lP7Udund+RvxRHZli9eGF",
	"981oWc5Bet7NoY87/+2LP6Sk/WSplqGv5YvuNyPTdiLVS23dUNpUuhqte6Pj4tmGj2GUsi/g/XBYjph6",
	"+ajwj5LPdlqMDeZZaqZ0M9AgRAb9rWFkt+G5dIcrORzm+sV8HccW0lw6kck6VADIo211FaumTQKRKmuQ",
	"x8UhUSdGEg6EBXoVnAaL5gYnRd2Hyvt313Q+jlBobSvryvK/AAAA//8BotLTxxYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
