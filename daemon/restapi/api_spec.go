// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240325090356-a14414f04fdd DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWUY/bNgz+KwQ3YC/qJdcWe8hbhw1F9rAL7q7Yw+2AKhbjqLUlVZKbGYH/+yDJ9sWx",
	"02Rb+hZZDPnx40dSe8x0abQi5R0u9mi45SV5svG0FKvuHI6CXGal8VIrXODKypLbGj5TDXoDgnu+5o7A",
	"83VByFAGI8P9FhkqXhIuUApkaOlLJS0JXHhbEUOXbankwf9G25L7YKf8z2+RYSmVLKsSF7cMfW0oXVFO",
	"FpumCa6c0cpRC/a+PYZTppUn5cNPbkwhMx5gzz65gH1/EPRHSxtc4A+zFyJm6dbNluJu/Ykyn6IN038H",
	"OSmyMoMOBYSYXCqpcuBgDuhZCpAKfn+4+wPaHBuGHxT9bSjzJH6zVturgU7eJhBXfUCg1qZjPxLYwzBW",
	"G7JeJl4zLWhc/WgM8Y4NCvfmNY6LxbAk53h+0lF33f/VeStVjqnKnWCesA3YmT83DN9bXZkxbCnOVzcA",
	"S9LcH8ftgOyRVFDgE2bcU65tHTDyHBl+pnqnrYjn9as8wnieSqD9olsttZD/lH67jCB5UdxtcPH0bbgp",
	"z4ZNJzok9XFLUCn5pSKQgpSXG0k2aA/8liBBZeN+G/XYCHsgfCm+PQxeIl4SI/hru+w/1nCK4c5ncuOp",
	"dJf3eu+OW8vrcL4npyub0SmEFyRZ2WJCZVPQu2BBH722L5NIj3OskrzzNNJ5vFlemke0fmxb42w2zwf5",
	"uD6hy4sy5mJUnRBVqo2OeKQvwtUD/0qPfO3g3WqJDL+SdUmmtzfzm3nwoQ0pbiQu8E38xOKminhmeY/R",
	"aOenmks6ICWMlsrDbksKVncPjyTAa+BCOOCgaJfaLHwLPdetxxuA0Jz9ztjJogAnS1PUsKaB6U8OPkYf",
	"N1J8hLac9c1fCiN+G5dDKByutPMts2lckvO/aFFfbae03A+ncVjfx0v49fz2lK/ebnawqeOS2vCq8Of/",
	"drww4/qqyjB3wj4+Ij5et7Wc7aVoUiEL8lG6QwJ/jd8Thcv0SBkk9XZ6xKYK77iD5FhcMZ8EKaTkDGVy",
	"I7MuL4Y5Tcjynnxl1cQfjtXynvzpTOfX1Uy75KbfT5G9l8H3P4hr2ODlemJMvpjMDl+2zTNDU/mxKlbV",
	"kKjv1FeHHJ3rrvk5IVZG8OsK8UP0OCXE0GC2m+6znfTbV+PZOZ5UUwvh+9A7FenyIXYxhH/1vnDTK2xc",
	"055Z2JElyCxdubBxYpZV4aUpDsIFPM0/AQAA//92o0JRGA4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
