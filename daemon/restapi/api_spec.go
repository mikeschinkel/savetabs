// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240325090356-a14414f04fdd DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xYTXPbNhP+K/vi7YwvjKjEbQ+6JWlrexLXnsRpD2kOELmiEIMAA4C2WQ//ewfLL/FD",
	"Fu1xcvGIwHL32WeB5bO+Z5FOM61QOctW9yzjhqfo0NDTG62vU26u/xDSofErMdrIiMwJrdiq3YcNGcBG",
	"G3gv1LVlAcO7TOoY2cqZHAMmvP23HE3BAqZ4imzF1ixgNtpiyr1r4TClqK7I/K51RqiElUGzwI3hhX+2",
	"rpB+YaNN6p/fcoeJNsU+mM0+SI8N1gVE1YrAmUijZ0J6YnSefZR5MgbpV4lAt0VIvF0AYoELkPoWTcQt",
	"xuDRwK1wW9BKFsBltuUqT4GrGGJut5QO4c+423bwkzZswAx+y4XBuEm3S2uQTQP3ipaHcC8UQrTlhke+",
	"8BQAvIMAcJEs4OjkKICjt/7PO//n6igAdNHiAXwU54n4/iQ/Q4x+FfRmB92B8OTmcRDeYXGrTbzv6NXb",
	"T7wg18907M5R5WcO0zE+vwqSr1ESthRVDrranKQqbTw9jqVzdDzmjj9AU/gXlzlCWls+kbG0xxiPY+Ej",
	"cHlpdIbG+Qv/AIF6/RUjN8XgFV/TYduXQLPftRjHk5mYk2eq8hVP9sNLnoLMPQuy0p8Vm2llK/ZPXSo/",
	"1Av+OdLKoXLkGe9cuHWp9A9dZLzjaUYe/8mXy+MoFjf0A09RSh3A6dX5+/9VW2G7x4LRQSyDAS/+RdCG",
	"HIBVIsvQgUGXG4Ux2DyK0NpNLiWl9UnhXYaRw/h3Y7QZYOdZJkXEvefwq/Xud1P4yeCGrdj/w+57G1a7",
	"Nqy8TcDL24CAtU1TEGKyhZH1jndEZR2eATIG2guoMtyxFRPKHb/qqBLKYYLGZ5uitTzZ66jZDiaue9ca",
	"PrM6YGP+pQzYWTx2emlEyk0B11iAiFE5sRFoBkh//XkS6Vl8UV3cERMiPsT9WUyIRw2g8Wl7J/9hTxft",
	"28ML4TvYPnQzEnTCSZy8ebmRPR+5EZMVGeXnEf0t3Ja6Fh1fKS82bPX54SQpkTIYZpI0XkYAaedsbqLJ",
	"ruA4mMWXOg/bJjK/Wv38RyXz0YTaaMJRsc8+8hu84msLv3FMtYLXl2csYDdobHWEXy6Wi6V3pTNUPBNs",
	"xY5pKaCPKEEKt8il2/5LpKGb0KpbjK5JA1aWYB13ufUypo0fU3yvpXwNqON4htkJutPa/aDlvlouJyTc",
	"Ow/2l+XxhBhFcyMihE+K33Ah+Vpi1Xvy1N9S3zkrdASXtqhth2ujb6uuXmc3RuhS+aaymgY5VbXWLux9",
	"PPqQPlDfJu6onzdiuooGax0XtTr1q1JY1xeHFrgFrqqX/fZOXmT1gqzC+55eLKs9eyjnVqvanmqtj23Q",
	"m7z2XMLOJOwr3/LL96Oyx5MlUvkOaZ4zT9iQq12ayvq3n0DKWTx1HJ3sjC5PpIj61RxjCvMjuKyk2C6V",
	"YxbJ5iGyGlX8OFYGQnYGNYPpesYbnRCdYdwfoGa8MPinxIw3BtPH96xw23g4ZDwRinvt5nz/7OpeDfBZ",
	"NZjUc45QCURG+F8chAIS4rBT2u5g+BHs0CXyA9+Paq8Uqw8vvG/mxHIO0vNuqHzcYW5f/CEl7SdLtQx9",
	"LV90H4BM24lUL7V1Q51SiWS07o2Oi2ebJIZRyr4a95NeOWLq5aPCP0oL22llNRhOqTPSzUCDEBn0t4aR",
	"3Ybn0h2u5HAy6xfzdRxbSHPpRCbrUAEgj7bVVaw6MKk9qqxBHheHFJoY6TEQFuhVcBosmhucVGgfKu/f",
	"XaD5OEKhta1GK8v/AgAA//9gFEx+7hUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
