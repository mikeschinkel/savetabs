// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240325090356-a14414f04fdd DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXS3PbthP/Kvjj3yMbKnHbg25JH7EmydjjOO0h9QEiVxQiEECApWLWw+/ewfIh8yGb",
	"9qi5idjF7m8f2P3pjicmt0aDRs+Xd9wKJ3JAcPT1xphdLtzuD6kQXDhJwSdOWpRG82UnZxtSYBvj2Hup",
	"d55HHG6tMinwJboCIi6D/tcCXMkjrkUOfMnXPOI+2UIugmmJkJNXLG2QenRSZ7yK2gPhnCjDt8dShYON",
	"cXn4/lUgZMaVx2C2cqYCNrYuWVKfSJiJNDkR0rfOFPa6tHAMKmWP8igYKbOgPQ9khidC+Q7Kb8alxzA2",
	"4mcWfXcikB9AFyuEfIwvnDIl1qAIWw66YKYWNpCswO0BUd5airiDr4V0kLYBHIAO8BEAFKlA8UCa4j+F",
	"KoDljeYzM5b3MibSVAYPQl06Y8FhaOIHEmjWXyDBqQxeizW12LEAWvnh2aDIZmLOTlTla5Edh5c9B9lp",
	"HkkVesVbo32d/XPM1VVzEL4ToxE0kmW4xXiLuQofB89wK3JLFv8uFouzJJV7+gHnoJSJ2Pn1h/f/q0Vx",
	"J+PRqBGraJCXcJEZRwaY19JaQOYAC6chZb5IEvB+UyhFYX3ScGshQUh/d864AXZhrZKJCJbjLz6Yvx/C",
	"Dw42fMn/Hx92SFxLfVxbm4BXdA4ZNDptQSiTHQzba++EyjrsAVJmJIuoMgL5kkuNZ68OqZIaIQMXos3B",
	"e5EdNdSKo4nnfhgNn3njsFW/qSK+SsdGL53MhSvZDkomU9AoNxLcAOkvP00iXaUX9cMdZUKmj+V+lRLi",
	"0QBobfpe5z9s6aK7PXwQYYIdQzcjQJSoYPLlFU71bBROTlZkFF9A9JfELU0tal+lLjZ8+fnhICmQKhpG",
	"krVWRgBJspobaNbu/Ok1MojiponDd4HMr1Y//lHJgjepN4Zw1NnnH8UersXas98E5Eaz15crHvE9OF+3",
	"8MsXixeLYMpY0MJKvuRndBTREiVI8RaEwu0/lDTACf61hWTHcAus1mQeBRaemQ3r/Kfk/wUnT44mTsgw",
	"fwt43pgfjNxXi8XY1cW7APbnxdlY9BHcXibAPmmxF1KJtYJ69hR5eKVhctboCC6JaGzHtGTquJrwRhDb",
	"bX6fPh/puoNKPGSDoQcfuTLY2TNuDMjxLB/ZfOU+V5xxYfCfYsaNAdGqbqYbYcpKpxf3FnS/7Fe0G6k/",
	"aWfW7NuKTGoR1hSGVgnNWrONbxK3DZ8UqqF0UmcscTL8EkxqRpyD3euGQzcFtvlQKwWggdvy7xBl+CBf",
	"fXjxXUuJqzlIPxz489P6v7v4XUraD5ZqGYda/ph1U9YaPxHqpfE4HMk1HwCPb0xanow0Db1UfeIRSG01",
	"ytTLJ7l/0tr300tkwMO30L4McMASB+HVcNLbiELh45UcktB+MV+nqWd5oVBa1biKGIhkWz9FKh+jxUaV",
	"dSDS8rFlJEerh0nP6CpDwzy4PUwuo6va+n++i4IfqcH7bh1V1b8BAAD//115KTitEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
