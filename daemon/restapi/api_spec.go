// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240325090356-a14414f04fdd DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
