// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const deleteVar = `-- name: DeleteVar :exec
DELETE FROM var WHERE id = ?
`

func (q *Queries) DeleteVar(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteVar, id)
	return err
}

const listGroup = `-- name: ListGroup :one
SELECT id, name, type, created_time, latest_time, created, latest FROM ` + "`" + `group` + "`" + ` ORDER BY latest DESC
`

func (q *Queries) ListGroup(ctx context.Context) (Group, error) {
	row := q.db.QueryRowContext(ctx, listGroup)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.CreatedTime,
		&i.LatestTime,
		&i.Created,
		&i.Latest,
	)
	return i, err
}

const listGroupType = `-- name: ListGroupType :one
SELECT type, name, description FROM group_type ORDER BY name DESC
`

func (q *Queries) ListGroupType(ctx context.Context) (GroupType, error) {
	row := q.db.QueryRowContext(ctx, listGroupType)
	var i GroupType
	err := row.Scan(&i.Type, &i.Name, &i.Description)
	return i, err
}

const listKeyValues = `-- name: ListKeyValues :many
SELECT id, resource_id, "key", value, created_time, updated_time, created, modified FROM key_value ORDER BY resource_id,key DESC
`

func (q *Queries) ListKeyValues(ctx context.Context) ([]KeyValue, error) {
	rows, err := q.db.QueryContext(ctx, listKeyValues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeyValue
	for rows.Next() {
		var i KeyValue
		if err := rows.Scan(
			&i.ID,
			&i.ResourceID,
			&i.Key,
			&i.Value,
			&i.CreatedTime,
			&i.UpdatedTime,
			&i.Created,
			&i.Modified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listResources = `-- name: ListResources :many
SELECT id, url, created_time, visited_time, created, visited FROM resource ORDER BY visited DESC
`

func (q *Queries) ListResources(ctx context.Context) ([]Resource, error) {
	rows, err := q.db.QueryContext(ctx, listResources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.CreatedTime,
			&i.VisitedTime,
			&i.Created,
			&i.Visited,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loadGroup = `-- name: LoadGroup :one
SELECT id, name, type, created_time, latest_time, created, latest FROM ` + "`" + `group` + "`" + ` WHERE id = ? LIMIT 1
`

func (q *Queries) LoadGroup(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, loadGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.CreatedTime,
		&i.LatestTime,
		&i.Created,
		&i.Latest,
	)
	return i, err
}

const loadGroupType = `-- name: LoadGroupType :one
SELECT type, name, description FROM group_type WHERE type = ? LIMIT 1
`

func (q *Queries) LoadGroupType(ctx context.Context, type_ interface{}) (GroupType, error) {
	row := q.db.QueryRowContext(ctx, loadGroupType, type_)
	var i GroupType
	err := row.Scan(&i.Type, &i.Name, &i.Description)
	return i, err
}

const loadResource = `-- name: LoadResource :one
SELECT id, url, created_time, visited_time, created, visited FROM resource WHERE id = ? LIMIT 1
`

func (q *Queries) LoadResource(ctx context.Context, id int64) (Resource, error) {
	row := q.db.QueryRowContext(ctx, loadResource, id)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.CreatedTime,
		&i.VisitedTime,
		&i.Created,
		&i.Visited,
	)
	return i, err
}

const upsertGroupsFromVarJSON = `-- name: UpsertGroupsFromVarJSON :exec
INSERT INTO ` + "`" + `group` + "`" + ` (name,type)
SELECT
   json_extract(r.value,'$.name') AS name,
   json_extract(r.value,'$.type') AS type
FROM var
   JOIN json_each( var.value ) r ON var.key='json'
WHERE var.id = ?
ON CONFLICT (name,type)
   DO UPDATE
   SET latest = strftime('%s','now')
`

func (q *Queries) UpsertGroupsFromVarJSON(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, upsertGroupsFromVarJSON, id)
	return err
}

const upsertKeyValuesFromVarJSON = `-- name: UpsertKeyValuesFromVarJSON :exec
INSERT INTO key_value (resource_id, key, value)
SELECT
   r.id,
   json_extract(kv.value,'$.key'),
   json_extract(kv.value,'$.value')
FROM var
   JOIN json_each( var.value ) kv ON var.key='json'
   JOIN resource r ON r.url=json_extract(kv.value,'$.url')
WHERE var.id = ?
   ON CONFLICT (resource_id,key)
   DO UPDATE
      SET value = excluded.value
`

func (q *Queries) UpsertKeyValuesFromVarJSON(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, upsertKeyValuesFromVarJSON, id)
	return err
}

const upsertResourcesFromVarJSON = `-- name: UpsertResourcesFromVarJSON :exec
INSERT INTO resource (url)
SELECT r.value AS url
FROM var
   JOIN json_each( var.value ) r ON var.key='json'
WHERE var.id = ?
ON CONFLICT (url)
   DO UPDATE
            SET visited = strftime('%s','now')
`

func (q *Queries) UpsertResourcesFromVarJSON(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, upsertResourcesFromVarJSON, id)
	return err
}

const upsertVar = `-- name: UpsertVar :execlastid
INSERT INTO var (key,value) VALUES (?,?)
ON CONFLICT (key) DO UPDATE SET value = excluded.value
`

type UpsertVarParams struct {
	Key   string         `json:"key"`
	Value sql.NullString `json:"value"`
}

func (q *Queries) UpsertVar(ctx context.Context, arg UpsertVarParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, upsertVar, arg.Key, arg.Value)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}
