// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const deleteVar = `-- name: DeleteVar :exec
DELETE FROM var WHERE id = ?
`

func (q *Queries) DeleteVar(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteVar, id)
	return err
}

const listGroupsByType = `-- name: ListGroupsByType :many
SELECT id, name, type, slug, created_time, latest_time, created, latest FROM ` + "`" + `group` + "`" + ` WHERE type = ? ORDER BY name
`

func (q *Queries) ListGroupsByType(ctx context.Context, type_ string) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, listGroupsByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Slug,
			&i.CreatedTime,
			&i.LatestTime,
			&i.Created,
			&i.Latest,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroupsType = `-- name: ListGroupsType :many
SELECT DISTINCT
   gt.type,
   gt.name,
   gt.plural,
   COUNT(DISTINCT g.id) AS group_count,
   CAST(CASE WHEN g.ID IS NULL THEN 0
      ELSE COUNT(DISTINCT rg.resource_id) END AS INTEGER) AS resource_count,
   gt.sort
FROM group_type gt
   LEFT JOIN ` + "`" + `group` + "`" + ` g ON gt.type=g.type
   LEFT JOIN resource_group rg ON g.id=rg.group_id
GROUP BY
   gt.sort,
   gt.type,
   gt.name
ORDER BY
   gt.sort
`

type ListGroupsTypeRow struct {
	Type          string         `json:"type"`
	Name          sql.NullString `json:"name"`
	Plural        sql.NullString `json:"plural"`
	GroupCount    int64          `json:"group_count"`
	ResourceCount int64          `json:"resource_count"`
	Sort          sql.NullInt64  `json:"sort"`
}

func (q *Queries) ListGroupsType(ctx context.Context) ([]ListGroupsTypeRow, error) {
	rows, err := q.db.QueryContext(ctx, listGroupsType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListGroupsTypeRow
	for rows.Next() {
		var i ListGroupsTypeRow
		if err := rows.Scan(
			&i.Type,
			&i.Name,
			&i.Plural,
			&i.GroupCount,
			&i.ResourceCount,
			&i.Sort,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroupsWithCounts = `-- name: ListGroupsWithCounts :many
SELECT id, resource_count, name, type, slug, type_name, type_plural FROM groups_with_counts_view
`

func (q *Queries) ListGroupsWithCounts(ctx context.Context) ([]GroupsWithCountsView, error) {
	rows, err := q.db.QueryContext(ctx, listGroupsWithCounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupsWithCountsView
	for rows.Next() {
		var i GroupsWithCountsView
		if err := rows.Scan(
			&i.ID,
			&i.ResourceCount,
			&i.Name,
			&i.Type,
			&i.Slug,
			&i.TypeName,
			&i.TypePlural,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listKeyValues = `-- name: ListKeyValues :many
SELECT id, resource_id, "key", value, created_time, modified_time, created, modified FROM key_value ORDER BY resource_id,key DESC
`

func (q *Queries) ListKeyValues(ctx context.Context) ([]KeyValue, error) {
	rows, err := q.db.QueryContext(ctx, listKeyValues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeyValue
	for rows.Next() {
		var i KeyValue
		if err := rows.Scan(
			&i.ID,
			&i.ResourceID,
			&i.Key,
			&i.Value,
			&i.CreatedTime,
			&i.ModifiedTime,
			&i.Created,
			&i.Modified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listResources = `-- name: ListResources :many
SELECT id, url, created_time, visited_time, created, visited FROM resource ORDER BY visited DESC
`

func (q *Queries) ListResources(ctx context.Context) ([]Resource, error) {
	rows, err := q.db.QueryContext(ctx, listResources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.CreatedTime,
			&i.VisitedTime,
			&i.Created,
			&i.Visited,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listResourcesForGroup = `-- name: ListResourcesForGroup :many
SELECT DISTINCT
   id,
   resource_id,
   url,
   group_id,
   cast(group_name AS VARCHAR(32)) AS group_name,
   cast(group_slug AS VARCHAR(32)) AS group_slug,
   cast(group_type AS VARCHAR(1))  AS group_type,
   cast(type_name AS VARCHAR(32))  AS type_name,
   domain,
   group_ids,
   group_types,
   group_names,
   quoted_group_types,
   quoted_group_slugs,
   quoted_group_names
FROM
   resources_view
WHERE true
   AND group_type = ?
   AND group_slug = ?
ORDER BY
   url
`

type ListResourcesForGroupParams struct {
	GroupType string `json:"group_type"`
	GroupSlug string `json:"group_slug"`
}

type ListResourcesForGroupRow struct {
	ID               sql.NullInt64  `json:"id"`
	ResourceID       sql.NullInt64  `json:"resource_id"`
	Url              sql.NullString `json:"url"`
	GroupID          int64          `json:"group_id"`
	GroupName        string         `json:"group_name"`
	GroupSlug        string         `json:"group_slug"`
	GroupType        string         `json:"group_type"`
	TypeName         string         `json:"type_name"`
	Domain           sql.NullString `json:"domain"`
	GroupIds         sql.NullString `json:"group_ids"`
	GroupTypes       sql.NullString `json:"group_types"`
	GroupNames       sql.NullString `json:"group_names"`
	QuotedGroupTypes interface{}    `json:"quoted_group_types"`
	QuotedGroupSlugs interface{}    `json:"quoted_group_slugs"`
	QuotedGroupNames interface{}    `json:"quoted_group_names"`
}

func (q *Queries) ListResourcesForGroup(ctx context.Context, arg ListResourcesForGroupParams) ([]ListResourcesForGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, listResourcesForGroup, arg.GroupType, arg.GroupSlug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListResourcesForGroupRow
	for rows.Next() {
		var i ListResourcesForGroupRow
		if err := rows.Scan(
			&i.ID,
			&i.ResourceID,
			&i.Url,
			&i.GroupID,
			&i.GroupName,
			&i.GroupSlug,
			&i.GroupType,
			&i.TypeName,
			&i.Domain,
			&i.GroupIds,
			&i.GroupTypes,
			&i.GroupNames,
			&i.QuotedGroupTypes,
			&i.QuotedGroupSlugs,
			&i.QuotedGroupNames,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loadGroup = `-- name: LoadGroup :one
SELECT id, name, type, slug, created_time, latest_time, created, latest FROM ` + "`" + `group` + "`" + ` WHERE id = ? LIMIT 1
`

func (q *Queries) LoadGroup(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, loadGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Slug,
		&i.CreatedTime,
		&i.LatestTime,
		&i.Created,
		&i.Latest,
	)
	return i, err
}

const loadGroupType = `-- name: LoadGroupType :one
SELECT type, sort, name, plural, description FROM group_type WHERE type = ? LIMIT 1
`

func (q *Queries) LoadGroupType(ctx context.Context, type_ string) (GroupType, error) {
	row := q.db.QueryRowContext(ctx, loadGroupType, type_)
	var i GroupType
	err := row.Scan(
		&i.Type,
		&i.Sort,
		&i.Name,
		&i.Plural,
		&i.Description,
	)
	return i, err
}

const loadGroupsBySlug = `-- name: LoadGroupsBySlug :one
SELECT id, name, type, slug, created_time, latest_time, created, latest FROM ` + "`" + `group` + "`" + ` WHERE slug = ? LIMIT 1
`

func (q *Queries) LoadGroupsBySlug(ctx context.Context, slug string) (Group, error) {
	row := q.db.QueryRowContext(ctx, loadGroupsBySlug, slug)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Slug,
		&i.CreatedTime,
		&i.LatestTime,
		&i.Created,
		&i.Latest,
	)
	return i, err
}

const loadResource = `-- name: LoadResource :one
SELECT id, url, created_time, visited_time, created, visited FROM resource WHERE id = ? LIMIT 1
`

func (q *Queries) LoadResource(ctx context.Context, id int64) (Resource, error) {
	row := q.db.QueryRowContext(ctx, loadResource, id)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.CreatedTime,
		&i.VisitedTime,
		&i.Created,
		&i.Visited,
	)
	return i, err
}

const upsertGroupsFromVarJSON = `-- name: UpsertGroupsFromVarJSON :exec
INSERT INTO ` + "`" + `group` + "`" + ` (name,type,slug)
SELECT
   json_extract(r.value,'$.name') AS name,
   json_extract(r.value,'$.type') AS type,
   json_extract(r.value,'$.slug') AS slug
FROM var
   JOIN json_each( var.value ) r ON var.key='json'
WHERE var.id = ?
ON CONFLICT (name,type)
   DO UPDATE
   SET latest = strftime('%s','now')
`

func (q *Queries) UpsertGroupsFromVarJSON(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, upsertGroupsFromVarJSON, id)
	return err
}

const upsertKeyValuesFromVarJSON = `-- name: UpsertKeyValuesFromVarJSON :exec
INSERT INTO key_value (resource_id, key, value)
SELECT
   r.id,
   json_extract(kv.value,'$.key'),
   json_extract(kv.value,'$.value')
FROM var
   JOIN json_each( var.value ) kv ON var.key='json'
   JOIN resource r ON r.url=json_extract(kv.value,'$.url')
WHERE var.id = ?
   ON CONFLICT (resource_id,key)
   DO UPDATE
      SET value = excluded.value
`

func (q *Queries) UpsertKeyValuesFromVarJSON(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, upsertKeyValuesFromVarJSON, id)
	return err
}

const upsertResourceGroupsFromVarJSON = `-- name: UpsertResourceGroupsFromVarJSON :exec
INSERT INTO resource_group (group_id, resource_id)
SELECT g.id, r.id
FROM var
   JOIN json_each( var.value ) j ON var.key='json'
   JOIN resource r ON r.url=json_extract(j.value,'$.resource_url')
   JOIN ` + "`" + `group` + "`" + ` g ON true
      AND g.name=json_extract(j.value,'$.group_name')
      AND g.type=json_extract(j.value,'$.group_type')
WHERE var.id = ?
ON CONFLICT (group_id, resource_id)
   DO UPDATE
            SET latest = strftime('%s','now')
`

func (q *Queries) UpsertResourceGroupsFromVarJSON(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, upsertResourceGroupsFromVarJSON, id)
	return err
}

const upsertResourcesFromVarJSON = `-- name: UpsertResourcesFromVarJSON :exec
INSERT INTO resource (url)
SELECT r.value AS url
FROM var
   JOIN json_each( var.value ) r ON var.key='json'
WHERE var.id = ?
ON CONFLICT (url)
   DO UPDATE
            SET visited = strftime('%s','now')
`

func (q *Queries) UpsertResourcesFromVarJSON(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, upsertResourcesFromVarJSON, id)
	return err
}

const upsertVar = `-- name: UpsertVar :execlastid
INSERT INTO var (key,value) VALUES (?,?)
ON CONFLICT (key) DO UPDATE SET value = excluded.value
`

type UpsertVarParams struct {
	Key   string         `json:"key"`
	Value sql.NullString `json:"value"`
}

func (q *Queries) UpsertVar(ctx context.Context, arg UpsertVarParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, upsertVar, arg.Key, arg.Value)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}
